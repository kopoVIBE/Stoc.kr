server:
  port: 8080

jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION}

spring:
  # DATABASE
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:13306/${MYSQL_DATABASE}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update # 애플리케이션 실행 시 엔티티에 맞춰 테이블 스키마 자동 변경
    show-sql: true # 실행되는 SQL 쿼리를 로그로 출력
    properties:
      hibernate:
        format_sql: true # SQL 쿼리를 예쁘게 포맷팅
        dialect: org.hibernate.dialect.MySQLDialect
  data:
    mongodb:
      uri: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/${MONGO_DATABASE}?authSource=admin
    redis:
#      host: ${REDIS_HOST}
      host: localhost
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      ssl:
        enabled: false
      lettuce:
        pool:
          enabled: true

  # KAFKA
  kafka:
    bootstrap-servers: localhost:19092
    consumer:
      group-id: stockr-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  # WebSocket
  websocket:
    allowed-origins: "*"
    endpoint: /ws
    topic-prefix: /topic
    application-prefix: /app

  # config:
  #   activate:
  #     on-profile: test

logging:
  level:
    com.stockr: INFO  # 기본적으로 INFO 레벨로 설정
    com.stockr.be.domain.stock.controller: INFO  # 웹소켓 컨트롤러는 INFO로 유지
    org.springframework.web: INFO
    org.springframework.web.socket: WARN  # DEBUG에서 WARN으로 변경
    org.springframework.messaging: WARN   # DEBUG에서 WARN으로 변경
    org.springframework.web.socket.messaging: WARN  # TRACE에서 WARN으로 변경
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql: trace
    org.springframework.data.redis: WARN  # debug에서 WARN으로 변경
    io.lettuce.core: WARN  # debug에서 WARN으로 변경
    org.springframework.data.mongodb: DEBUG

KIS:
  APP:
    KEY: ${KIS_APP_KEY}
    SECRET: ${KIS_APP_SECRET}
  API:
    BASE-URL: https://openapivts.koreainvestment.com:29443
    WS-URL: ws://ops.koreainvestment.com:31000
  VIRTUAL:
    KEY: ${KIS_VIRTUAL_APP_KEY}
    SECRET: ${KIS_VIRTUAL_APP_SECRET}
    ACCOUNT: ${KIS_VIRTUAL_ACCOUNT}
    PRODUCT-CODE: ${KIS_VIRTUAL_PRODUCT_CODE}

trade:
  python-service:
    url: http://localhost:8000
