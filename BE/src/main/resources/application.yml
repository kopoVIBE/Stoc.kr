server:
  port: 8080

spring:
  # DATABASE
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:13306}/${MYSQL_DATABASE:stockr}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: ${MYSQL_USER:stockr}
    password: ${MYSQL_PASSWORD:stockr123!}

  jpa:
    hibernate:
      ddl-auto: update # 애플리케이션 실행 시 엔티티에 맞춰 테이블 스키마 자동 변경
    show-sql: true # 실행되는 SQL 쿼리를 로그로 출력
    properties:
      hibernate:
        format_sql: true # SQL 쿼리를 예쁘게 포맷팅
        dialect: org.hibernate.dialect.MySQLDialect

  # MONGODB
  data:
    mongodb:
      uri: mongodb://${MONGO_USER:stockr}:${MONGO_PASSWORD:stockr123!}@${MONGO_HOST:localhost}:${MONGO_PORT:27117}/${MONGO_DATABASE:stockr}?authSource=admin

  # REDIS
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:16379}
    password: ${REDIS_PASSWORD:stockr123!}
    timeout: 3000
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms

  # KAFKA
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:19092}
    consumer:
      group-id: stockr-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  #  # WebSocket
  websocket:
    allowed-origins: "*"
    endpoint: /ws
    topic-prefix: /topic
    application-prefix: /app

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql: trace # ? 로 표시되는 바인딩 파라미터 값까지 로그로 출력
    com.stockr.be: debug
