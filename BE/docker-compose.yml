services:
  # MySQL - 종목 기본 정보 및 유사 종목 데이터 저장
  mysql:
    image: mysql:8.0
    container_name: stockr-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Seoul
    ports:
      - "13306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password
      - --innodb-buffer-pool-size=256M
      - --innodb-log-file-size=64M
      - --max-allowed-packet=128M
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "${MYSQL_USER}",
          "-p${MYSQL_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - 종목 뉴스 및 공시 데이터 저장
  mongodb:
    image: mongo:6.0
    container_name: stockr-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    command: [ "--auth" ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Redis - 캐시 및 세션 데이터 저장
  redis:
    image: redis:7.0
    container_name: stockr-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --bind 0.0.0.0
      --protected-mode yes
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper - Kafka 클러스터 관리
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: stockr-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka - 실시간 데이터 스트리밍
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: stockr-kafka
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:29092 --list
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka UI - Kafka 모니터링
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: stockr-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8989:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: stockr
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stockr-app
    depends_on:
      - mysql
      - mongodb
      - redis
      - kafka
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: prod
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DATABASE: ${MONGO_DATABASE}
      MONGO_USER: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  # Python Realtime Stock Price Service
  # realtime-stock:
  #   image: python:3.9-slim
  #   container_name: stockr-realtime
  #   depends_on:
  #     - redis
  #     - app
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - WEBSOCKET_URL=ws://app:8080/ws
  #     - KIS_APP_KEY=${KIS_APP_KEY}
  #     - KIS_APP_SECRET=${KIS_APP_SECRET}
  #     - KIS_ACCOUNT_CODE=${KIS_ACCOUNT_CODE}
  #     - KIS_PRODUCT_CODE=${KIS_PRODUCT_CODE}
  #   volumes:
  #     - ../realtime_stock:/app
  #   working_dir: /app
  #   command: >
  #     bash -c "pip install -r requirements.txt &&
  #              python stock_realtime.py"

volumes:
  mysql_data:
  mongodb_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
